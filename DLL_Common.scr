// this is common #MODULE

// В ЦЬОМУ МОДУЛІ/ФАЙЛІ ЗАБОРОНЯЄТЬСЯ ВНОСИТИ СВОЇ ПРАВКИ!!!
// Для написання своїх перевірок та функцій використовувати модуль/файл DLL_Private
// Ігнорування - відмова у подальшому консультуванні !!!

// Списки для перевірки на коректність заповнення реквізитів ІМ`Я / ПО БАТЬКОВІ (ДРУГЕ ІМ`Я) / ПРІЗВИЩЕ
// !!! Забороняється корегувати списки listLE listLF !!! Для внесення своїх правок використовувати listLEprv listLFprv у модулі/файлі DLL_Private !!!
  var listLE = "ІГОРЬ,КОНСТЯНТИН,ЗЕНОВ,ЗИНОВІЙ,ВЕЧЕС,АНАЛОЛИЙ,ГЕНА,АДНРІЙ,АЛЕКСІЙ,ЕВГЕНІЙ,АНАНОЛІЙ"
  var listLF = "ГЕНАД,ВАСИЛЬЙОВИЧ,АНРЕЕВИЧ,ВІТАЛИЙОВИЧ,НИКОЛАЄВНА,ГЕРГІЙОВИЧ,НИКОЛАЙОВИЧ,ЕВГЕЕВНА,ЕВГЕНИЕВИЧ,СЕРГЕЕВА,МИКОЛАЕВИЧ,НИКОЛЕЕВИЧ,ВОЛОДИМИРЫВНА,АНАТОЛИЕВИЧ," +
               "ЄВИЧ,АНРІЇВН,ВАСИЛІЇВНА,ВАСИЛІЙОВИЧ,ВІКТОРОВНА,ВІТАЛІВНА,ВОЛОДИМИРОВНА,ГЕННАДИЕВИЧ,ГЕОРГІЄВНА,ДМИТРИЙОВИЧ,ДМИТРІЙОВИЧ,ЄДУАРДОВИЧ,ЄФИМОВИЧ,ЕВГЕНІЇВНА,ЕВГЕНІЙОВИЧ,ЕВГЕНОВИЧ,ЭВГЕНОВИЧ,ІВАНОВНА,ІГОРЕВИЧ,ІЛЬЇЧ,ИЛЛИЧ,ІЛЛІНІЧНА,ФЕДІРІВНА,ФЕДОРІЇВНА,ЯКІЇВНА,ЯКОВНА"
  var listLD = ""
// Списки для перевірки на коректність заповнення "ЗМІСТ ДОКУМЕНТА", "ЗМІСТ ПРОТИПРАВНОЇ ДІЇ"
// !!! Забороняється корегувати списки listDGPR listDGPR2 listDGPR3 !!! Для внесення своїх правок використовувати listDGPRprv у модулі/файлі DLL_Private !!!
  var listDGPR = "п.р.,ПОТОЧНОГО РОКУ,поточного року,ТЕКУЩЕГО ГОДА,текущего года,ЦЬОГО РОКУ,цього року,ЭТОГО ГОДА,этого года,МИНУЛОГО РОКУ,минулого року,ПРОШЛОГО ГОДА,прошлого года,ДАНИЙ ЧАС,даний час,ДАННОЕ ВРЕМЯ,данное время,ТЕПЕРІШНІЙ ЧАС,теперішній час,НАСТОЯЩЕЕ ВРЕМЯ,настоящее время"
  var listDGPR2 = "п.р.,ПОТОЧНОГО РОКУ,ТЕКУЩЕГО ГОДА,ЦЬОГО РОКУ,ЭТОГО ГОДА,МИНУЛОГО РОКУ,ПРОШЛОГО ГОДА,ДАНИЙ ЧАС,ДАННОЕ ВРЕМЯ,ТЕПЕРІШНІЙ ЧАС,НАСТОЯЩЕЕ ВРЕМЯ"
  var listDGPR3 = "++"

// служ. функція перевірка наявності латиниці
  function haveEng(str)
  {
     var haveEng = false;
     for (var i = 0; i < str.length; i++)
       if ((str.substr(i, 1) >= "A") && (str.substr(i, 1) <= "Z"))
            haveEng = true;
     return haveEng;
  }

// служ. функція перевірка наявності кирилиці
  function haveRus(str)
  {
     var haveRus = false;
     for (var i = 0; i < str.length; i++)
       if (((str.substr(i, 1) >= "А") && (str.substr(i, 1) <= "Я")) || (str.substr(i, 1) == "Ё") || (str.substr(i, 1) == "Ї") || (str.substr(i, 1) == "Є"))
            haveRus = true;
     return haveRus;
  }

// служ. функція перевірки третього значення в коді реквізиту
  function getbyThirdValue(io, recvizit, thirdvalue)
  {
     var ThirdValueFound = false;
     var rv = io.GetPropByPath(recvizit);
     if (rv != null)
       for (var j = 0; j < rv.Count; j++)
       {
           if ((rv.Value1(j) > 2) && (rv.Value1(j).substr(2, 1) == thirdvalue))
           {
              ThirdValueFound = true;
              break;
           }
       }
       return ThirdValueFound;
  }

// служ. функція перевірки першого, третього значення в коді реквізиту
  function getbyFirstThirdValue(io, recvizit, firstthirdvalue)
  {
     var FirstThirdValueFound = false;
     var rv = io.GetPropByPath(recvizit);
     if (rv != null)
       for (var j = 0; j < rv.Count; j++)
       {
           if ((rv.Value1(j) > 2) && (rv.Value1(j).substr(0, 1) == firstthirdvalue.substr(0, 1)) && (rv.Value1(j).substr(2, 1) == firstthirdvalue.substr(1, 1)))
           {
              FirstThirdValueFound = true;
              break;
           }
       }
       return FirstThirdValueFound;
  }

// служ. функція перевірка існування посилання в ІО
  function haveRef(io, group, ref, iocode, from)
  {
     var haveref = false;
     var ionum = SC.IOMList.GetIOByAttr("CODE", iocode).Attr("NUM"); // номер ІО за кодом
     var grp = io.GetPropByPath(group);   // група посилання
     var n = 0;
     if (grp != null)
       for (var j = 0; j < grp.Count; j++)    // врахувати множинність групи
       {
           var r = grp.GetPropByPath(ref, j); // реквізит посилання
           if (r != null)
           {
               if (r.Count > 0)                   // врахувати множинність реквізиту
               {
                  if (r.Value1(0) == ionum)
                  {
                    n++;
                    if (n > from)
                    {
                      haveref = true;  // посилання існує
                      break;
                    }
                  }
               }
           }
       }
     if (haveref) return r.Value2(0); else return(-1);  // -1 посилання не існує
  }
  
// служ. функція
// перевірка коректного формування (заповнення) складних множинних груп
// приклад: Фотографія
// правило перевірки: в груповому реквізиті Фото не повинно бути більш 1 посиллання на ІО ФТ
  function haveRef2(io, group, group2)
  {
     var haveref = false;
     var grp = io.GetPropByPath(group);   // група посилання
     if (grp != null)
       for (var j = 0; j < grp.Count; j++)    // врахувати множинність групи
       {
         var grp2 = grp.GetPropByPath(group2, j);
         if (grp2 != null)
         {
             if (grp2.Count > 1)              // перевірка множинності реквізиту
             {
               haveref = true;
               break;
             }
         }
       }
     if (haveref) return grp2.Count; else return(-1);  // -1 (кількість посилань або 0, або 1, тобто правильно)
  }
